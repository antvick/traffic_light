---
- hosts: all
  vars:
    user: pi
    user_home: "/home/{{ user }}"
    project_name: traffic_light
    deploy_dir: "{{ user_home }}/{{ project_name }}"
    miniconda_version: Miniconda3-latest-Linux-armv7l.sh
    miniconda_install_dir: "{{ user_home }}/miniconda"
    api_env: "{{ project_name }}"
    api_service: "{{ project_name }}_api"
    hostname: traffic-light
  become: yes
  gather_facts: true

  tasks:
  - name: Update repo cache
    apt:
      autoclean: yes
      autoremove: yes
      update_cache: yes

  - name: Install packages
    apt:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - git
      - nginx
      - apt-transport-https
      - unattended-upgrades
      - apt-listchanges

  - name: Download miniconda installer
    get_url:
      url: "https://repo.continuum.io/miniconda/{{ miniconda_version }}"
      dest: "/tmp/{{ miniconda_version }}"
      mode: 0555

  - name: Install miniconda
    command: "/tmp/{{ miniconda_version }} -b -p {{ miniconda_install_dir }}"
    args:
      creates: "{{ miniconda_install_dir }}"
    become: no

  - name: Deploy project
    git:
      repo: https://github.com/antvick/traffic_light.git
      dest: "{{ deploy_dir }}"
      version: master
      force: yes
    become: no
    notify:
      - restart "{{ api_service }}"

  - name: Remove API environment
    # can't use `./run restore` because `--prune` arg isn't available on ARM miniconda binary
    command: "{{ miniconda_install_dir }}/bin/conda env remove -n {{ api_env }} --yes"
    args:
      chdir: "{{ deploy_dir }}/src/api"
    become: no

  - name: Restore API environment
    command: "{{ miniconda_install_dir }}/bin/conda env update -n {{ api_env }} -f prod_environment.yml -q QUIET"
    args:
      chdir: "{{ deploy_dir }}/src/api"
    become: no

  - name: Create API serivce
    template:
      src: "{{ api_service }}.service.j2"
      dest: "/etc/systemd/system/{{ api_service }}.service"
    notify:
      - restart "{{ api_service }}"

  - name: Start and enable API service
    systemd:
      name: "{{ api_service }}"
      daemon_reload: yes
      state: started
      enabled: yes

  - name: Start and enable nginx service
    systemd:
      name: nginx
      state: started
      enabled: yes

  - name: Create traffic light webserver site config
    template:
      src: "{{ project_name }}.j2"
      dest: "/etc/nginx/sites-available/{{ project_name }}"
    become: yes
    notify:
      - restart nginx

  - name: Enable traffic light webserver site
    file:
      src: "/etc/nginx/sites-available/{{ project_name }}"
      dest: "/etc/nginx/sites-enabled/{{ project_name }}"
      state: link
    become: yes
    notify:
      - restart nginx

  handlers:
    - name: restart "{{ api_service }}"
      systemd:
        name: "{{ api_service }}"
        state: restarted

    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: yes
